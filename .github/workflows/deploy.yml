name: Backup, Optimize & Deploy to GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: main

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install tools
      run: |
        npm install -g html-minifier-terser terser clean-css-cli purgecss
        sudo apt-get update && sudo apt-get install -y webp

    - name: Create backup folder and backup
      run: |
        mkdir -p backup
        zip -r backup/project_backup_$(date +%Y%m%d_%H%M%S).zip .

    - name: Upload backup artifact
      uses: actions/upload-artifact@v4
      with:
        name: project-backup
        path: backup/*.zip

    - name: Ensure .minify_cache exists
      run: |
        [ -f ".minify_cache" ] || touch ".minify_cache"

    - name: Remove unused CSS
      run: |
        CACHE_FILE=".minify_cache"
        find . -type f -name "*.css" -print0 | while IFS= read -r -d '' file; do
          if [ "$file" -nt "$CACHE_FILE" ]; then
            purgecss --css "$file" --content "**/*.html" "**/*.js" --output "$(dirname "$file")"
            echo "✅ Purged $file"
          else
            echo "⏩ Skipped $file (no changes)"
          fi
        done

    - name: Minify HTML
      run: |
        CACHE_FILE=".minify_cache"
        find . -type f -name "*.html" -print0 | while IFS= read -r -d '' file; do
          if [ "$file" -nt "$CACHE_FILE" ]; then
            html-minifier-terser --collapse-whitespace --remove-comments --minify-css true --minify-js true -o "$file" "$file"
            echo "✅ Minified $file"
          else
            echo "⏩ Skipped $file (no changes)"
          fi
        done

    - name: Minify CSS
      run: |
        CACHE_FILE=".minify_cache"
        find . -type f -name "*.css" -print0 | while IFS= read -r -d '' file; do
          if [ "$file" -nt "$CACHE_FILE" ]; then
            cleancss -o "$file" "$file"
            echo "✅ Minified $file"
          else
            echo "⏩ Skipped $file (no changes)"
          fi
        done

    - name: Minify JS
      run: |
        CACHE_FILE=".minify_cache"
        find . -type f -name "*.js" -print0 | while IFS= read -r -d '' file; do
          if [ "$file" -nt "$CACHE_FILE" ]; then
            terser --compress --mangle -o "$file" -- "$file"
            echo "✅ Minified $file"
          else
            echo "⏩ Skipped $file (no changes)"
          fi
        done

    - name: Convert images to WebP
      run: |
        CACHE_FILE=".minify_cache"
        find . -type f \( -iname "*.jpg" -o -iname "*.png" \) -print0 | while IFS= read -r -d '' img; do
          if [ "$img" -nt "$CACHE_FILE" ]; then
            cwebp -q 80 "$img" -o "${img%.*}.webp" && rm "$img"
            echo "✅ Converted $img"
          else
            echo "⏩ Skipped $img (no changes)"
          fi
        done

    - name: Cleanup unused files
      run: |
        find . -type f \( -name "*.tmp" -o -name "*.bak" -o -name "*~" \) -delete
        find . -type f -empty -delete

    - name: Backup unused images
      run: |
        mkdir -p backup_unused_images
        find images assets/img uploads -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.webp" -o -iname "*.gif" \) | while IFS= read -r img; do
          if ! grep -R "$(basename "$img")" . --exclude-dir=backup_unused_images --exclude-dir=node_modules > /dev/null; then
            echo "Unused image detected: $img"
            cp "$img" backup_unused_images/
            rm "$img"
          fi
        done
        echo "Unused image cleanup done, backups in backup_unused_images/"

    # Setup Git config and debug status
    - name: Setup Git and Debug Status
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        echo "=== Git Status ==="
        git status
        echo "=== Git Branches ==="
        git branch -vv

    # Commit changes and push
    - name: Commit and Push changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git add .
        git commit -m "Optimize assets (purge + minify + WebP)" || echo "No changes to commit"
        git push origin main

    - name: Update .minify_cache timestamp
      run: touch .minify_cache

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        exclude_assets: |
          .git/*
          backup/*
          backup_unused_images/*
